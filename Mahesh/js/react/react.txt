react interview questions>
https://www.interviewbit.com/react-interview-questions/

latest version of react
19.0.0 

Introduction to React
React is an open-source JavaScript framework library that allows developers to the creation of simple, fast, and scalable web applications.
React Hooks is among the features that are implemented latest in the version React 16.8.

-------------------------------------------------------
1. What is React?
React is a front-end and open-source JavaScript library which is useful in developing user interfaces specifically for applications with a single page.

The important features of React are:
It supports server-side rendering.
It follows unidirectional data binding or data flow.
It will make use of the virtual DOM rather than real DOM (Data Object Model).
It uses reusable UI components for developing the view.

-------------------------------------------------------
server side rendering in react
https://www.geeksforgeeks.org/what-is-server-side-rendering-in-react/
Server-Side Rendering (SSR) in React is a technique that involves rendering React components on the server side instead of the client side (browser). 
With SSR, the server pre-renders the React components into HTML before sending it to the client.

-------------------------------------------------------
Unidirectional Data Flow in react
https://www.geeksforgeeks.org/reactjs-unidirectional-data-flow/
In ReactJS, unidirectional data flow means that data moves in a single direction—from the parent component to child components—via props. Changes to the state are always initiated in the parent and propagated downward.
Any feedback or data from the child component to the parent is achieved using callback functions

-------------------------------------------------------
2. What are the advantages of using React?
Use of Virtual DOM to improve efficiency: React uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.

Reusable components: React uses component-based architecture for developing applications. Components are independent and reusable bits of code. These components can be shared across various applications having similar functionality. The re-use of components increases the pace of development.

-------------------------------------------------------
3. What are the limitations of React?
React is not a full framework as it is only a library

-------------------------------------------------------
-------------------------------------------------------
5. What are keys in React?
A key is a special string attribute that needs to be included when using lists of elements.

Example of a list using key -

const ids = [1,2,3,4,5];
const listElements = ids.map((id)=>{
	return(
	<li key={id.toString()}>
	  {id}
	</li>
	)
})

Importance of keys -
Keys help react identify which elements were added, changed or removed.
Keys should be given to array elements for providing a unique identity for each element.
Keys are generally used for displaying a list of data coming from an API.

***Note- Keys used within arrays should be unique among siblings. They need not be globally unique.

-------------------------------------------------------
6. What is JSX?
JSX stands for "JavaScript XML". It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild() or createElement().

Using JSX:

const container = (
<div>
  <p>This is a text</p>
</div>
);
ReactDOM.render(container,rootElement);

in the code above, we are directly using HTML inside JavaScript.

-------------------------------------------------------
7. What are the differences between functional and class components?
Before the introduction of Hooks in React, functional components were called stateless components and were behind class components on a feature basis. After the introduction of Hooks, functional components are equivalent to class components.

Although functional components are the new trend, the react team insists on keeping class components in React.

Functional components are nothing but JavaScript functions and therefore can be declared using an arrow function or the function keyword:

function card(props){
	return(
	  <div className="main-container">
	    <h2>Title of the card</h2>
	  </div>
	)
}

const card = (props) =>{
	return(
	  <div className="main-container">
	    <h2>Title of the card</h2>
	  </div>
	)
}

-------------------------------------------------------
8. What is the virtual DOM? How does react use the virtual DOM to render the UI?
Virtual DOM is a concept where a virtual representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM.

Why was virtual DOM introduced? 
DOM manipulation is an integral part of any web application, but DOM manipulation is quite slow when compared to other operations in JavaScript. The efficiency of the application gets affected when several DOM manipulations are being done. Most JavaScript frameworks update the entire DOM even when a small part of the DOM changes.

For example, consider a list that is being rendered inside the DOM. If one of the items in the list changes, the entire list gets rendered again instead of just rendering the item that was changed/updated. This is called inefficient updating.

To address the problem of inefficient updating, the react team introduced the concept of virtual DOM.

How does it work?
For every DOM object, there is a corresponding virtual DOM object(copy), which has the same properties. The main difference between the real DOM object and the virtual DOM object is that any changes in the virtual DOM object will not reflect on the screen directly. Consider a virtual DOM object as a blueprint of the real DOM object. Whenever a JSX element gets rendered, every virtual DOM object gets updated.

**Note- One may think updating every virtual DOM object might be inefficient, but that’s not the case. Updating the virtual DOM is much faster than updating the real DOM since we are just updating the blueprint of the real DOM.

React uses two virtual DOMs to render the user interface. One of them is used to store the current state of the objects and the other to store the previous state of the objects. Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated. After knowing which objects were updated, react renders only those objects inside the real DOM instead of rendering the complete real DOM. This way, with the use of virtual DOM, react solves the problem of inefficient updating.

-------------------------------------------------------
10. What are props in React?
The props in React are the inputs to a component of React. They can be single-valued or objects having a set of values that will be passed to components of React during creation by using a naming convention that almost looks similar to HTML-tag attributes. We can say that props are the data passed from a parent component into a child component.

The main purpose of props is to provide different component functionalities such as:
Passing custom data to the React component.
For example, consider we are creating an element with reactProp property as given below: <Element reactProp = "1" />

-------------------------------------------------------
11. Explain React state and props.
Note- State object is not available in functional components but, we can use React Hooks to add state to a functional component.

add state to a functional component
To add state to a React functional component, use the useState hook, which provides both the current state value and a function to update it, similar to how this.state and this.setState work in class components. 

react props vs state
In React, props and state are both JavaScript objects that manage data and control how components behave. However, they have different purposes and characteristics. 

				        Props                               State

What it does 	  Passes data from parent 		        Manages data within a component
				        to child components

How it's used   Allows components to communicate    Allows components to be dynamic and responsive 
				        with each other

When it's used  For passing read-only data 		      For managing data that changes over time

How props and state work together:
Props are immutable, so they can't change once passed. 
State is mutable, so it can be updated based on user actions or other events. 
When state changes, React re-renders the component with the updated data. 


Does prop change trigger re-render in React?
In order for props to change, they need to be updated by the parent component. This means the parent would have to re-render, which will trigger re-render of the child component regardless of its props.

What triggers re-render in React?
There are four reasons why a component would re-render itself: 
state changes, parent (or children) re-renders, context changes, and hooks changes.

-------------------------------------------------------
13. What is prop drilling in React?
Sometimes while developing React applications, there is a need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. To pass data between such components, we pass props from a source component and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.

The disadvantage of using prop drilling is that the components that should otherwise be not aware of the data have access to the data.

-------------------------------------------------------
17. What are the rules that must be followed while using React Hooks?
There are 2 rules which must be followed while you code with Hooks:

React Hooks must be called only at the top level. 
It is allowed to call the Hooks only from the React Function Components.
It is not allowed to call them inside the nested functions, loops, or conditions.

-------------------------------------------------------
-------------------------------------------------------
React Interview Questions for Experienced

1. How to perform automatic redirect after login?
The react-router package will provide the component <Redirect> in React Router. Rendering of a <Redirect> component will navigate to a newer location.

import { Redirect } from 'react-router'
<Redirect to="/your/redirect/page" />

-------------------------------------------------------
https://www.geeksforgeeks.org/how-to-pass-data-from-one-component-to-other-component-in-reactjs/

We have 3 approaches to share or pass the data between React components.

Approach 1: Passing data from Parent to Child in React
For passing data from parent to child component, we use props. Props data is sent by the parent component and cannot be changed by the child component as they are read-only.

Approach 2: Passing data from Child to Parent Component
For passing the data from the child component to the parent component, we have to create a callback function in the parent component and then pass the callback function to the child component as a prop. This callback function will retrieve the data from the child component. The child component calls the parent callback function using props and passes the data to the parent component.

Approach 3: Passing data between Siblings
For passing data among siblings, there are multiple methods we can choose from as shown below:
Combination of the above two methods (callback and use of props).
Using Redux.
ContextAPI

-------------------------------------------------------
react How to pass data between components
https://www.freecodecamp.org/news/pass-data-between-components-in-react/

How to Pass Data and Events Between Components in React:

How to Pass Data Between a Parent Component and a Child Component
(Parent to child, using props)

import React from 'react'
import Child from './Child';
import { Button } from 'semantic-ui-react';
import { useState } from 'react';
import './App.css';

export default function Parent() {
  const [data, setData] = useState('');

  const parentToChild = () => {
    setData("This is data from Parent Component to the Child Component.");
  }

  return (
    <div className="App">
      <Child parentToChild={data}/>

      <div>
        <Button primary onClick={() => parentToChild()}>Click Parent</Button>
      </div>
    </div>
  )
}

As you can see here, we are calling the parentToChild function on the Click Parent button click. When the Click Parent button is clicked, it will store the "This is data from Parent Component to the Child Component" in the data variable.
Now, let's pass that data state to our child components. You can do this using props.
Pass the data as props when you are calling the child component like this:

<Child parentToChild={data}/>

Here, we are passing the data in the child component as data.
data is the data which we have to pass, and parentToChild is the name of the prop.
Next, it's time to capture the data in the child component. And it's very simple.

simply catch the parentToChild in the parameters.

import React from 'react'
export default function Child({parentToChild}) {
    return (
        <div>
            {parentToChild}
        </div>
    )
}

-------------------------------------------------------
How to Pass Data Between a Child Component and a Parent Component
(child to parent, using callback)

First, you need to create a function in the parent component called childToParent and an empty state named data
Then, pass the childToParent function as a prop to the child component.
Now, in our child component, accept this function call as props and assign it to an onClick event.
Pass the data into the the parentToChild function as parameters.

import React from 'react'
import { Button } from 'semantic-ui-react';

export default function Child({childToParent}) {
    const data = "This is data from Child Component to the Parent Component."
    return (
        <div>
            <Button primary onClick={() => childToParent(data)}>Click Child</Button>
        </div>
    )
}

Next, in the parent component, accept this data in the childToParent function as a parameter. Then set the data using the useState hook.

import './App.css';
import { useState } from 'react';
import Child from './Child';

function Parent() {
  const [data, setData] = useState('');

  const childToParent = (childdata) => {
    setData(childdata);
  }

  return (
    <div className="App">
     {data}
      <div>
        <Child childToParent={childToParent}/>
      </div>
    </div>
  );
}

export default Parent;

You can also pass events like onClick
<Button primary onClick={() => childToParent(data)}>Click Child</Button>


compare it with:
React useCallback Hook
https://www.w3schools.com/react/react_usecallback.asp

-------------------------------------------------------
-------------------------------------------------------
react context api
https://www.geeksforgeeks.org/explain-new-context-api-in-react/

Context API in React
Context API in React is used to share data across the components without passing the props manually through every level. It allows to create global state of data providing global access to all the components.

What is Context API?
Context API is used to pass global variables anywhere in the code without the prop drilling. It helps when there is a need for sharing state between a lot of nested components. It is light in weight and easier to use, to create a context just need to call React.createContext(). No need to install other dependencies or third-party libraries like redux for state management.

Why is Context API used?
Context API solves the problem of prop drilling in React. Prop Drilling occurs when data is to be passed between multiple layers before finally sending it to the required component. This makes the application slower. This problem is solved by Context API as it creates global variables to be used throughout the application without any middle components involved. It is also easier to use than React Redux

Working
To work with Context API we need React.createContext. It has two properties Provider and Consumer. The Provider acts as a parent, it passes the state to its children whereas the Consumer uses the state that has been passed.

Benefits of Context API over React Redux
In Redux we have to manipulate or update multiple files to add even a single feature but in Context it can be done in much lesser lines of code
One way data binding in React is maintained using Context whereas Redux violates it.
Multiple stores/contexts can be created using Context whereas Redux creates just a single store

Example: Write the following code in respective files

Context.js: We create the consumer and provider in this file
Index.js: The provider is given to the application in this file
WelocomePage.js: The consumer consumes the value in this file
App.js: The components are imported in this file and then rendered on the webpage

// Context.js
import React from 'react';

const UserContext =React.createContext();

export const Provider = UserContext.Provider;
export const Consumer = UserContext.Consumer;


// index.js

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App'
import {Provider} from './Context'

ReactDOM.render(
  <Provider value={{name:"Geeksforgeeks", id:195}}>
    <App />
  </Provider>,
  document.getElementById('root')
);


// App.js

import WelcomePage from "./WelcomePage";

function App() {
  return (
    <div className="App">
       <WelcomePage/>
    </div>
  );
}

export default App;


// WelcomePage.js

import React from "react";
import { Consumer } from "./Context";

const WelcomePage = () => {
    return (
        <div>
            <h1>Welcome User :</h1>
            <Consumer>
                {(value) => (
                    <h2>
                        Name: {value.name} id :{value.id}{" "}
                    </h2>
                )}
                //this function takes the value as prop
            </Consumer>
        </div>
    );
};

export default WelcomePage;

-------------------------------------------------------
React useContext Hook
https://www.w3schools.com/REACT/react_usecontext.asp
(read this all)

-------------------------------------------------------

Example: In this example we will use context API to pass the data from one sibling Child1 to other sibling Child2.

// Filename - App.js

import { React, useState, createContext } from "react";
import "./index.css";
import Child1 from "./Child1";
import "./App.css";
import Child2 from "./Child2";

// Create a new context and export
export const NameContext = createContext();

// Create a Context Provider
const NameContextProvider = ({ children }) => {
    const [name, setName] = useState(undefined);

    return (
        <NameContext.Provider value={{ name, setName }}>
            {children}
        </NameContext.Provider>
    );
};

const App = () => {
    return (
        <div className="App">
            <h1 className="geeks">GeeksforGeeks</h1>
            <NameContextProvider>
                <Child1 />
                <Child2 />
            </NameContextProvider>
        </div>
    );
};

export default App;


// Filename - Child1.js

import React, { useContext } from "react";
import { NameContext } from "./App";

const Child1 = () => {
    const { setName } = useContext(NameContext);
    function handle() {
        setName("Geeks");
    }
    return (
        <div>
            <h3>This is Child1 Component</h3>
            <button onClick={() => handle()}>Click </button>
        </div>
    );
};

export default Child1;


// Filename - Child2.js

import React, { useContext } from "react";
import { NameContext } from "./App";

const Child2 = () => {
    const { name } = useContext(NameContext);

    return (
        <div>
            <br />
            <h4>This is Child2 Component</h4>
            <h4>hello: {name}</h4>
        </div>
    );
};

export default Child2;

-------------------------------------------------------
-------------------------------------------------------
6. Explain conditional rendering in React.
Conditional rendering refers to the dynamic output of user interface markups based on a condition state. It works in the same way as JavaScript conditions. Using conditional rendering, it is possible to toggle specific application functions, API data rendering, hide or show elements, decide permission levels, authentication handling, and so on.

There are different approaches for implementing conditional rendering in React. Some of them are:

Using if-else conditional logic which is suitable for smaller as well as for medium-sized applications
Using ternary operators, which takes away some amount of complication from if-else statements
Using element variables, which will enable us to write cleaner code. (Logical && Operator)

conditional rendering in React
https://www.w3schools.com/react/react_conditional_rendering.asp
(take an overview)


7. Can React Hook replaces Redux?
The React Hook cannot be considered as a replacement for Redux (It is an open-source, JavaScript library useful in managing the application state) when it comes to the management of the global application state tree in large complex applications, even though the React will provide a useReducer hook that manages state transitions similar to Redux. Redux is very useful at a lower level of component hierarchy to handle the pieces of a state which are dependent on each other, instead of a declaration of multiple useState hooks.

In commercial web applications which is larger, the complexity will be high, so using only React Hook may not be sufficient. Few developers will try to tackle the challenge with the help of React Hooks and others will combine React Hooks with the Redux.


8. What is React Router?
React Router refers to the standard library used for routing in React. It permits us for building a single-page web application in React with navigation without even refreshing the page when the user navigates.

The major components of React Router are given below:
BrowserRouter, Routes, Route
Outlet, Link

react router
https://www.w3schools.com/react/react_router.asp
(read this all)

-------------------------------------------------------
react fetch data from api
https://www.geeksforgeeks.org/how-to-fetch-data-from-an-api-in-reactjs/

Different ways to Fetch data from API in React
Using JavaScript Fetch: To fetch data in react we can use JavaScript built in fetch method it allows to send http request to the api and get the data in form of promise.
Using Axios: It is a promise based javascript library used to make different http requests with simple chaining syntax. It make the data fetching and response process easy and efficient.

-------------------------------------------------------
-------------------------------------------------------
(take an overview)

react how to manage logged in user
https://dev.to/miracool/how-to-manage-user-authentication-with-react-js-3ic5
https://stackoverflow.com/questions/49819183/react-what-is-the-best-way-to-handle-login-and-authentication

how to persist redux state
https://stackoverflow.com/questions/37195590/how-can-i-persist-redux-state-tree-on-refresh

-------------------------------------------------------
how to create and run react app
https://create-react-app.dev/docs/getting-started/

npx create-react-app my-app
npm init
npm start
npm test

how to build and deploy react app
https://handsonreact.com/docs/build-deploy

npm run build
This generates a static version of your app in the dist/ folder
The output in dist/ can be served by any static web server.

-------------------------------------------------------
