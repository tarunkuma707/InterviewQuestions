============= React ============
Advatange of ReactJs
States and Props
Why we create state instead of creating variable in ReactJs
Disadvantange of ReactJs
Why we use reactJs
Reconcillation full process
How browser understand ReactJs
States are Props
Hooks
usecallback
Use memo callback
useRef Hooks
class life cycle
Life Cycle in reactJs
Types of Components
Pure Component
Component life cycle
Higher order component with example
Middleware in React
Middleware with Redux
Prop Drilling
prob drilling
State Lifting UP
UseState and UseReducer hook difference
UseRef and UseEffect difference
When to use ContextAPI and Redux
Redux main piller
CodeReduce
UseMemo and UseCallback difference
Usereducer and userselector
TypeScript
Unit Testing in React
Clousure
Multi language support
Why we should pass key attribute in react list
why should not pass index as a key in react elements what will problem if we pass index.
Server side rendering and client side rendering.(CSR and SSR)
Reconcilation in React
Rendering of Large list in ReactJs
Virtualization, React.window
Memorization 
memorize
Once
Prevent unnecessary rendering in reactjs
React Unittesting 
How browser understanding code
React is oneway data binding or two way databiding
Virtual Dom
Difference between Virtual Dom and real dom
Redux
Difference between Lazy Codding and Code Splitting
Render Props
React Portals
Profilers
react fragment
<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:7330066831803584512?collapsed=1" height="565" width="504" frameborder="0" allowfullscreen="" title="Embedded post"></iframe>

================ Redux
ContextAPI and difference in Context API and Redux
We have state management in react then why we are using redux

==========Machine Code =========
https://www.youtube.com/watch?v=yitelFyogRk



console.log('Start');

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

process.nextTick(() => {
  console.log('nextTick');
});
 
setTimeout(() => {
  console.log('setTimeout');
}, 0);
 
setImmediate(() => {
  console.log('setImmediate');
});
 
console.log('End');

SELECT d.department_name as departmentName, count(e.id) as employee_count FROM department d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.id

ou are given two tables:
employees
id
	
name
	
department_id


1
	
Alice
	
10


2
	
Bob
	
20


3
	
Charlie
	
10


4
	
David
	
30


5
	
Eva
	
NULL
departments
id
	
name


10
	
Engineering


20
	
HR


30
	
Sales
Write a SQL query to return the names of all departments along with the count of employees in each department.
Include departments that have zero employees as well.
 
✅ Expected Output:
department_name
	
employee_count


Engineering
	
2


HR
	
1


Sales
	
1
	•		•	Note: Eva should not be counted as her department_id is NULL. Departments with 0 employees should still appear with a count of 0.